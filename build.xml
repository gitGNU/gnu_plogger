<project name="plogger" default="shell" 
	 xmlns:ivy="antlib:org.apache.ivy.ant"
	 xmlns:fx="javafx:com.sun.javafx.tools.ant">
  <!-- some variables used -->
  <property name="lib.dir" value="lib" />
  <!-- not required 
  <property name="main.lib.dir" value="${lib.dir}/main" />
  <property name="test.lib.dir" value="${lib.dir}/test" />
  <property name="java.lib" value="/usr/lib/jvm/java-8-oracle/lib" />
  -->
  <property name="build.dir" value="build" />
  <property name="report.dir" value="${build.dir}/report" />
  <property name="main.build.dir" value="${build.dir}/main" />
  <property name="test.build.dir" value="${build.dir}/test" />
  <property name="src.dir" value="src" />
  <property name="main.src.dir" value="${src.dir}/main" />
  <property name="main.kawa.src.dir" value="${main.src.dir}/kawa" />
  <property name="main.java.src.dir" value="${main.src.dir}/java" />
  <property name="main.resources.dir" value="${main.src.dir}/resources" />
  <property name="test.src.dir" value="${src.dir}/test" />
  <property name="build.tools" value="/usr/local/src/kawa/tools/" />
  
  <!-- paths used for compilation, test and run  -->
  <!--
  <path id="main.lib.path">
    <fileset dir="${main.lib.dir}" />
  </path>
  <path id="test.lib.path">
    <fileset dir="${test.lib.dir}" />
  </path>
  -->
  <path id="fxant">
    <filelist>
      <file name="${java.home}\..\lib\ant-javafx.jar"/>
      <file name="${java.home}\lib\ext\jfxrt.jar"/>
    </filelist>
  </path>
  <path id="main.path">
    <!-- disabled 
    <path location="${java.lib}/"/>
    -->
    <path refid="main.lib.path" />
    <path refid="fxant" />
    <path location="${main.build.dir}" />
  </path>
  <path id="test.build.path">
    <path refid="test.lib.path" />
    <path location="${main.build.dir}" />
  </path>
  <path id="test.run.path">
    <path refid="test.build.path" />
    <path location="${test.build.dir}" />
  </path>

  <taskdef name="kawac" 
	   classname="gnu.kawa.ant.Kawac" 
	   classpath="${build.tools}"/>
  
  
  <!-- ================================= 
       target: resolve              
       ================================= -->
  <target name="resolve" description="--> retreive dependencies with ivy">
    <ivy:retrieve/>
    <ivy:cachepath pathid="main.lib.path" conf="main"/>
    <ivy:cachepath pathid="test.lib.path" conf="test"/>
  </target>

  <!-- ================================= 
       target: prepare-build
       ================================= -->  
  <target name="prepare-build" depends="resolve">
    <!-- not required 
    <mkdir dir="${build.dir}" />
    -->
    <mkdir dir="${report.dir}" />
    <mkdir dir="${main.build.dir}" />
    <mkdir dir="${test.build.dir}" />
  </target>  

  <target name="print-classpath" depends="prepare-build">
    <pathconvert property="classpathProp" refid="main.path"/>
    <echo>Classpath is ${classpathProp}</echo>
  </target>

  <!-- ================================= 
       target: report              
       ================================= -->
  <target name="report" depends="prepare-build" description="--> generates a report of dependencies">
    <ivy:report todir="${build.dir}"/>
  </target>

  <!-- ================================= 
       target: compile-main
       ================================= -->  
  <target name="compile-main" depends="prepare-build">
    <kawac srcdir="${main.kawa.src.dir}" 
	   language="scheme" 
	   destdir="${main.build.dir}" 
	   classpathref="main.lib.path"/>
    <javac srcdir="${main.java.src.dir}" 
	   destdir="${main.build.dir}"/>
    <copy todir="${main.build.dir}">
      <fileset dir="${main.resources.dir}">
	<include name="**/*.fxml"/>
      </fileset>
    </copy>
  </target>

  <!-- ================================= 
       target: shell
       ================================= -->  
  <target name="shell" depends="compile-main" description="--> run the shell">
    <java classname="kawa.repl" classpathref="main.path">
      <arg value="-s"/>
      <arg value="--output-format readable-scheme"/>
    </java>
    <!--
    <java classpathref="main.path" classname="kawa.repl">
      <arg value="-e"/>
      <arg value="(import (plogger cmd))(hello-plogger)"/>
    </java>
    -->
  </target>

  <target name="run" depends="compile-main" description="--> run the app">
    <java fork="true" classname="PloggerApp" classpathref="main.path"/>
  </target>

  <target name="post-jfx-deploy-example">
    <fx:deploy width="${javafx.run.width}" height="${javafx.run.height}"
               nativeBundles="all"
               outdir="${basedir}/${dist.dir}" outfile="${application.title}">
      <fx:application name="${application.title}"
                      mainClass="${javafx.main.class}"/>
      <fx:resources>
        <fx:fileset dir="${main.build.dir}" includes="*.jar"/>
      </fx:resources>
      <fx:info title="${application.title}" vendor="${application.vendor}"/>
    </fx:deploy>
  </target>

  <!-- ================================= 
       target: compile-test
       ================================= -->  
  <target name="compile-test" depends="compile-main">
    <kawac srcdir="${test.src.dir}" 
	   language="scheme" 
	   destdir="${test.build.dir}" 
	   classpathref="test.build.path"/>
  </target>

  <!-- ================================= 
       target: test              
       ================================= -->
  <target name="test" depends="compile-test" description="Run unit tests">
    <junit printsummary="yes" haltonfailure="yes">
      <classpath>
        <path refid="test.run.path"/>
      </classpath>

      <test name="config-tests"
	    haltonfailure="no" todir="${report.dir}">
	<formatter type="plain" />
	<formatter type="xml" />
      </test>
      <test name="all-record-types-test"
	    haltonfailure="no" todir="${report.dir}">
	<formatter type="plain" />
	<formatter type="xml" />
      </test>
      <test name="db-tests"
	    haltonfailure="no" todir="${report.dir}">
	<formatter type="plain" />
	<formatter type="xml" />
      </test>
      <test name="models-tests"
	    haltonfailure="no" todir="${report.dir}">
	<formatter type="plain" />
	<formatter type="xml" />
      </test>

      <!-- not working

      <batchtest fork="yes">
        <fileset dir="${test.src.dir}">
          <include name="**/*test*.class"/>
        </fileset>
      </batchtest>
      -->
    </junit>
  </target>

  <!-- ================================= 
       target: test-shell
       ================================= -->  
  <target name="test-shell" depends="compile-test" description="--> run the test shell">
    <java classname="kawa.repl" classpathref="test.run.path">
      <arg value="-s"/>
      <arg value="--output-format readable-scheme"/>
    </java>
    <!--
    <java classpathref="main.path" classname="kawa.repl">
      <arg value="-e"/>
      <arg value="(import (plogger cmd))(hello-plogger)"/>
    </java>
    -->
  </target>

  
  <!-- ================================= 
       target: clean              
       ================================= -->
  <target name="clean" description="--> clean the project">
    <!--
    <delete includeemptydirs="true">
      <fileset dir="${basedir}">
        <exclude name="src/**" />
        <exclude name="build.xml" />
        <exclude name="ivy.xml" />
      </fileset>
    </delete>
    -->
    <delete dir="${lib.dir}"/>
    <delete dir="${build.dir}"/>
  </target>

  <!-- ================================= 
       target: clean-cache              
       ================================= -->
  <target name="clean-cache" description="--> clean the ivy cache">
    <ivy:cleancache />
  </target>
</project>
