#!/bin/sh
# -*- scheme -*-
exec guile --debug -e main -s $0 "$@"
!#
;; Plogger - Time tracking software
;; Copyright (C) 2010 Romel Raul Sandoval Palomo
;;
;; This program is free software; you can redistribute it and/or    
;; modify it under the terms of the GNU General Public License as   
;; published by the Free Software Foundation; either version 3 of   
;; the License, or (at your option) any later version.              
;;                                                                  
;; This program is distributed in the hope that it will be useful,  
;; but WITHOUT ANY WARRANTY; without even the implied warranty of   
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    
;; GNU General Public License for more details.                     
;;                                                                  
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org

(use-modules (plogger config)
	     (plogger commands)
	     (plogger db)
             (ice-9 getopt-long))

(define *debug-mode* #f)

(define (display-version)
  (display 
   (format #f "\
plogger ~a

Copyright (C) 2010 Romel Raul Sandoval Palomo.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
" 
	   *version*)))

(define (display-help)
  (display "\
Usage: plogger COMMAND [OPTION]... [ARGUMENTS]

Plogger is a time tracking program.

Commands:

 start              Starts tracking an activity, options: -T -f -P
 end                Stops tracking current activity, options: -p -c
 interrupt          Holds activity tracking, no options
 continue           Continues activity tracking, options: -c
 add-project NAME   Adds a new project to track, no-options
 projects           Show all projects, no options
 add-unit           Adds a new unit, no options, args: PLURAL SINGULAR
 units              Shows all units, no options
 add-task           Adds a new task to track, options: -P -t, arg: DESC
 tasks              Show un-resolved tasks, options: [-P]
 add-phase          Adds a phase, options: -f
 show-phases        Show all phases, no options
 query              Execute an SQL query, no options

Options:

 -P, --project=NAME     Some project with tasks
 -T, --task=ID          Task you want to track
 -t, --tags=TAGS        Comma separated list of tags
 -p, --progress=PERCENT The progress percentage made on task -1 means cancelled
 -c, --comment          Some comment for an activity
 -h, --help             This help message
 -v, --version          A brief version message
 -d, --debug            Hack the world

Report bugs to <romel at openmailbox.org>.
"))

(define (execute-command c options arguments)
  (cond
   ((string= c "add-project") (add-project options (car arguments)))
   ((string= c "projects") (projects options))
   ((string= c "add-unit") (add-unit options arguments))
   ((string= c "units") (units))
   ((string= c "add-task") (add-task options arguments))
   ((string= c "tasks") (tasks options arguments))
   ((string= c "add-phase") (add-phase options arguments))
   ((string= c "show-phases") (show-phases options arguments))
   ((string= c "start") (start options arguments))
   ((string= c "end") (end options arguments))
   ((string= c "interrupt") (interrupt options arguments))
   ((string= c "continue") (continue options arguments))
   ((string= c "query") (query options arguments))
))

(define (execute-options args)
  (let* ((option-spec '((task (single-char #\T) (value #t))
			(phase (single-char #\f) (value #t))
			(project (single-char #\P) (value #t))
			(comment (single-char #\c) (value #t))
			(progress (single-char #\p) (value #t))
			(tags (single-char #\t) (value #t))
			(query (single-char #\q) (value #t))
			(debug (single-char #\d) (value #f))
			(version (single-char #\v) (value #f))
			(help (single-char #\h) (value #f))))
	 (options (getopt-long args option-spec))
	 (command (car (cdr args)))
	 (arguments (cdr (cdr args)))
	 (help-wanted (option-ref options 'help #f))
	 (version-wanted (option-ref options 'version #f))
	 (debug-wanted (option-ref options 'debug #f)))
    (if first-run?
	(begin
	  (mkdir *rc-dir*)
	  (let ((db-obj (db-open)))
	    (begin 
	      (init-db db-obj)
	      (db-close db-obj)
	      (init-rc-file)))))
    
    
    (if debug-wanted
	(set! *debug-mode* #t))
    (if (or version-wanted help-wanted)
	(begin
	  (if version-wanted (display-version))
	  (if help-wanted (display-help)))
	(begin
	  (execute-command command options arguments)))))

							 
(define (main args)
  ;;(display args)(newline)
  (catch 'null-options
	 (lambda ()
	   (if (> (length args) 1)
	       (execute-options args)
	       (throw 'null-options)))
	 (lambda (key)
	   (display-help))))


